import heapq

#  index of tile in  3x3 board
def find_index(state, tile):
    for i in range(3):
        for j in range(3):
            if state[i][j] == tile:
                return (i, j)

# No. of misplaced tiles
def misplaced_tiles(current, goal):
    count = 0
    for i in range(3):
        for j in range(3):
            if current[i][j] != goal[i][j] and current[i][j] != 0:
                count += 1
    return count

# A* algorithm 
def a_star_misplaced_tiles(start, goal):
    pq = []
    heapq.heappush(pq, (0, 0, start, []))  # f(n), g(n), state, path
    visited = set()

    while pq:
        f, g, current, path = heapq.heappop(pq)

        if current == goal:
            return path + [current], g  # Return final path & cost

        visited.add(str(current))

        zero_pos = find_index(current, 0)
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Move direction

        for d in directions:
            new_pos = (zero_pos[0] + d[0], zero_pos[1] + d[1])
            if 0 <= new_pos[0] < 3 and 0 <= new_pos[1] < 3:
                new_state = [list(row) for row in current]
                new_state[zero_pos[0]][zero_pos[1]] = new_state[new_pos[0]][new_pos[1]]
                new_state[new_pos[0]][new_pos[1]] = 0

                if str(new_state) not in visited:
                    h = misplaced_tiles(new_state, goal)
                    f_new = g + 1 + h
                    heapq.heappush(pq, (f_new, g + 1, new_state, path + [current]))

    return None, None  # No solution found

#  user input for  start and goal state
def get_user_input():
    print("Enter the start state (row by row, use 0 for the blank):")
    start_state = [list(map(int, input().split())) for _ in range(3)]

    print("Enter the goal state (row by row, use 0 for the blank):")
    goal_state = [list(map(int, input().split())) for _ in range(3)]

    return start_state, goal_state

# Main function 
def main():
    start_state, goal_state = get_user_input()

    solution, cost = a_star_misplaced_tiles(start_state, goal_state)

    if solution:
        print("\nStart State:")
        for row in start_state:
            print(row)
       
        print("\nGoal State:")
        for row in goal_state:
            print(row)

        print("\nSolution Path:")
        for step in solution:
            for row in step:
                print(row)
            print()

        print(f"Total Path Cost: {cost}")
    else:
        print("No solution found.")

# Run  main function
if __name__ == "__main__":
    main()
